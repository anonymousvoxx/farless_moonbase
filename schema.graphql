# enum BalanceEventType {
#   Endowed
#   DustLost
#   Transfer
#   BalanceSet
#   Reserved
#   Unreserved
#   ReserveRepatriated
#   Deposit
#   Withdraw
#   Slashed
# }

# enum StakingEventType {
#   Rewarded
#   Slashed
#   Bonded
#   Unbonded
#   Withdrawn
# }

interface TransactionBase {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: Int!
  extrinisicHash: String
  chainName: String!
  event: String!
}

type BalanceTransaction implements TransactionBase @entity {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: Int!
  extrinisicHash: String
  event: String!
  from: String
  to: String
  account: String
  amount: BigInt
  balanceStatus: String
  free: BigInt
  reserved: BigInt
  chainName: String!
}

# type SetBalanceData {
#   who: ID!
#   free: BigInt!
#   reserved: BigInt!
# }

# type MainBalanceData {
#   account: ID!
#   amount: BigInt!
# }

type StakingTransaction implements TransactionBase @entity {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: Int!
  extrinisicHash: String
  event: String!
  chainName: String!
  account: String!
  amount: BigInt!
}
