

enum BalanceEventType {
  Endowed
  DustLost
  Transfer
  BalanceSet
  Reserved
  Unreserved
  ReserveRepatriated
  Deposit
  Withdraw
  Slashed
}

enum StakingEventType {
  Rewarded
  Slashed
  Bonded
  Unbonded
  Withdrawn
  Kicked
  Chilled
}

interface TransactionBase {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: Int!
  extrinisicHash: String
}

type BalanceTransaction implements TransactionBase @entity {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: Int!
  extrinisicHash: String
  data: BalanceData
  event: BalanceEventType
}

type BalanceData {
  from: ID
  to: ID
  account: ID
  amount: BigInt
  status: String
  free: BigInt
  reserved: BigInt
}

# type SetBalanceData {
#   who: ID!
#   free: BigInt!
#   reserved: BigInt!
# }

# type MainBalanceData {
#   account: ID!
#   amount: BigInt!
# }

type StakingTransaction implements TransactionBase @entity {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: Int!
  extrinisicHash: String
  data: StakingData
  event: StakingEventType
}

type StakingData {
  account: ID!
  amount: BigInt
}
